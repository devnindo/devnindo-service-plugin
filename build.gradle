plugins
{
    id 'idea'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '1.2.1'
}

group  "io.devnindo.plugin"
version  '0.9.40'
sourceCompatibility = JavaVersion.VERSION_17


configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


dependencies {
    implementation 'com.thoughtworks.qdox:qdox:2.0.3'
    implementation 'com.google.dagger:dagger:2.45'
    implementation 'com.squareup:javapoet:1.12.1'
    implementation('io.devnindo.core:service-common:0.9.8'){changing = true}
   // api('io.devnindo.core:devnindo-datatype:0.9.8') {changing = true}
    implementation 'org.junit.jupiter:junit-jupiter:5.9.2'
}

gradlePlugin {
    plugins {
        website = 'https://devnindo.io'
        vcsUrl = 'https://github.com/devnindo/devnindo-service-plugin.git'

        servicePlugin {
            id = "io.devnindo.devnindo-service-plugin"
            implementationClass = "io.devnindo.serviceplugin.PluginMain"
            displayName = 'Devnindo Service Plugin'
            description = 'Plugin for autowiring actions from all modules to ActionModule for deployment'
            tags.set([ 'service-helper', 'devnindo'])

        }
    }
}

task publishPlugin(type: GradleBuild) {
    tasks = [
            'clean',
            'test',
            'build',
            'generateMetadataFileForPluginMavenPublication',
            'publishPluginMavenPublicationToMavenRepository',
            'publish'
    ]
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact(javadocJar) {
                classifier = 'javadoc'
            }
        }
    }
}

test {
  useJUnitPlatform()
  // maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
  testLogging {
    events "passed", "skipped", "failed"
    showStandardStreams true
  }
}

repositories {
    mavenCentral()
}